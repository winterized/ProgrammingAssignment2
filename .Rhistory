install.packages("KernSmooth")
library(KernSmooth)
getwd()
getwd()
swirl()
source("swirl")
source("Swirl")
library("swirl")
swirl()
head(flags)
dim(flags)
class(flags)
cls_list <- lapply(flags,class)
cls_list
class(cls_list)
as.character(cls_list)
cls_vect <- sapply(flags,class)
class(cls_vect)
sum(flags$orange)
flag_colors <- flags[,11:17]
head(flag_colors)
lapply(flag_colors, sum)
sapply(flag_colors, sum)
sapply(flag_colors, mean)
flag_shapes <- flags[, 19:23]
lapply(flag_shapes, range)
shape_mat <- sapply(flag_shapes, range)
shape_mat
class(shape_mat)
unique(c(3, 4, 5, 5, 5, 6, 6))
unique_vals <- lapply(flags, unique)
unique_vals
sapply(unique_vals, length)
sapply(flags, unique)
lapply(unique_vals, function(elem) elem[2])
sapply(flags, unique)
vapply(flags, unique, numeric(1))
ok()
sapply(flags, class)
vapply(flags, class, characters(1))
vapply(flags, class, character(1))
?tapply
table(flags$landmass)
table(flags$animate)
tapply(flags$animate, flags$landmass, mean)
tapply(flags$population, flags$red, summary)
tapply(flags$population, flags$landmass, summary)
library(datasets)
data("iris")
?iris
head(iris)
tapply(iris$Sepal.Length, iris$Species, mean)
rowMeans(iris[,1:4])
apply(iris[,1:4],1,mean)
apply(iris[,1:4],2,mean)
data("mtcars")
?mtcars
with(mtcars, tapply(mpg, cyl, mean))
tapply(mtcars$mpg, mtcars$cyl, mean)
split(mtcars, mtcars$cyl)
sapply(split(mtcars$mpg, mtcars$cyl), mean)
tapply(mtcars$cyl, mtcars$mpg, mean)
mean(mtcars$mpg, mtcars$cyl)
tapply(mtcars$hp, mtcars$cyl, mean)
test <- tapply(mtcars$hp, mtcars$cyl, mean)
test[2]
test[3] - test[1]
debug(ls)
ls
ls()
setwd("~/Apps WIP/ProgrammingAssignment2")
?solve
source('~/Apps WIP/ProgrammingAssignment2/cachematrix.R')
source('~/Apps WIP/ProgrammingAssignment2/cachematrix.R')
testm <- matrix(1:25,5,5)
testm
solve(testm)
testm = matrix(c(2,-1,0,-1,2,-1,0,-1,2),3,3)
testm
solve(testm)
cacheSolve(testm)
makeCacheMatrix(testm)
cacheSolve(testm)
x <- cacheSolve(testm)
m2 <- makeCacheMatrix(testm)
cacheSolve(m2)
cacheSolve(m2)
source('~/Apps WIP/ProgrammingAssignment2/cachematrix.R')
m2 <- makeCacheMatrix(testm)
cacheSolve(m2)
cacheSolve(m2)
